@page "/login"
@using Microsoft.AspNetCore.WebUtilities;
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider



<PageTitle>Logga in</PageTitle>



<h3>Login</h3>


<EditForm Model="user" OnValidSubmit="HandleLogin">
    @*med hjälp av det här så validerar vi inlogging*@

    <DataAnnotationsValidator/>

    <div class="mb-3">
        <label for="email">Mail</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"/>
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Lösenord</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
   
    <button type="submit" class="btn btn-primary">Logga in</button>
 
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>


@code {
    private UserLogin user = new UserLogin();

    private string errorMessage = string.Empty;

    //Parameter till return url
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }
    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);

            //Vi kallar på getauthentication att state ändras vid inloggning
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }

    }
}
