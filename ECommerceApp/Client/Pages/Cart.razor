@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
<PageTitle>Kundvagn</PageTitle>
@inject NavigationManager NavigationManager


<h3>Kundvagn</h3>
@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}

else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image"/>
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span> <br/>
                    <input type="number" value="@product.Quantity" @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))" class="form-control input-quantity" min="1"/>
                    <button class="btn-delete" @onclick="@(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Tag Bort</button>
                </div>
                <div class="cart-product-price">@(product.Price * product.Quantity) :-</div>

            </div>
        }

        <div class="cart-product-price">
            Total (@cartProducts.Count): @cartProducts.Sum(product => product.Price * product.Quantity) :- 
        </div>
    </div>

    <button @onclick="PlaceOrder" class="btn btn-success float-end mt-1">Gå till Checkout</button>
}
@code {

    List<CartProductDTO> cartProducts = null;

    string message = "Laddar varukorgen...";


    //Kollar om vi har något i varukorgen 
    protected override async Task OnInitializedAsync ()
    {
      

        await LoadCart();
    }

    private async Task RemoveProductFromCart (int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Du har inga varor i kundvagnen";
        }

    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductDTO product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {

        // för att returna url
        string url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);

    }
}
